import imp
import marshal
import os
import struct
import sys
import types


class Importer(object):
    def __init__(self, data, datafile, set_excepthook=True):
        self.data = data
        self.datafile = datafile
        if set_excepthook:
            sys.excepthook = self.excepthook

    @staticmethod
    def excepthook(type, value, traceback):
        import traceback as tb
        tb.print_exception(type, value, traceback)

    def find_module(self, fullname, path):
        module = fullname in self.data
        if module:
            return self

    def get_source(self, fullname):
        __, code, ts = self.data[fullname]
        return code

    def get_code(self, fullname, filename):
        py_ts = self.data[fullname][2]
        try:
            with open(fullname + ".pyc", "rb") as pyc:
                pyc_magic = pyc.read(4)
                pyc_ts = struct.unpack("<I", pyc.read(4))[0]
                if pyc_magic == imp.get_magic() and pyc_ts == py_ts:
                    return marshal.load(pyc)
        except:
            pass

        code = self.get_source(fullname)
        compiled_code = compile(code, filename, "exec")

        try:
            with open(fullname + ".pyc", "wb") as pyc:
                pyc.write(imp.get_magic())
                pyc.write(struct.pack("<I", py_ts))
                marshal.dump(compiled_code, pyc)
        except:
            pass
        return compiled_code

    def load_module(self, fullname):
        exists = fullname in sys.modules

        module = types.ModuleType(fullname)
        module.__loader__ = self

        is_package = self.data[fullname][0]
        path = fullname.replace(".", os.path.sep)
        if is_package:
            module.__package__ = fullname
            module.__file__ = os.path.join(path, "__init__.py")
            module.__path__ = [path]
        else:
            module.__package__ = fullname.rsplit(".", 1)[0]
            module.__file__ = path + ".py"

        sys.modules[fullname] = module

        try:
            compiled_code = self.get_code(fullname, module.__file__)
            exec(compiled_code, module.__dict__)
        except:
            if not exists:
                del sys.modules[fullname]
            raise

        return module
